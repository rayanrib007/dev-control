// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer{
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String    @unique
  phone       String
  address     String?
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
  tickets     Ticket[]
  userId      String?   @db.ObjectId
  user        User?     @relation(fields: [userId], references: [id])
}

model Ticket{
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  status      String
  created_at  DateTime?   @default(now())
  updated_at  DateTime?   @updatedAt
  customerId  String?     @db.ObjectId
  customer    Customer?   @relation(fields: [customerId], references: [id])
  userId      String?     @db.ObjectId
  user        User?       @relation(fields: [userId], references: [id])
}

model Account {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  userId             String     @db.ObjectId
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?    @db.String
  accessToken        String?    @db.String
  accessTokenExpires DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  user               User       @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  tickets       Ticket[]
  customers     Customer[]
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
